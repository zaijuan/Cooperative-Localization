//This program is the simplified version of joy_follower without the long_service part.
#include <ros/ros.h>
#include <tf/tf.h>
#include <tf/transform_broadcaster.h> //for broatcasting the transform
#include <geometry_msgs/Twist.h>
#include <std_msgs/Bool.h>
#include <sensor_msgs/Joy.h>
#include "xbox_follower/ShortTarget.h" //defines the service type headfile.
#include "ar_sys/Trans_Repro_Info.h"
#include <xbox_follower/the_error.h>
#include <geometry_msgs/PoseStamped.h>


float repro_err[5]= { 0.0, 0.0, 0.0, 0.0, 0.0};

class TeleopRobot
{
	public:
		TeleopRobot();
	private:
		ros::NodeHandle nh_;	
                bool free_MODE;
                double speed_scale;               
                float repro_err_avr;
                float dist_difference;
                float nearest_dist_allower;
                float dist_B_board_A_cam;
             
                bool START;
		bool is_current_pose_between_A_B_stored;
                int number_of_msg;
                int repro_error_array_id;
                int trans_vec_id;

                geometry_msgs::Twist vel_leader;
                geometry_msgs::Twist vel_follower;

                tf::Transform T_B_backboard_B_camleft;
		tf::Transform T_B_backboard_A_sidecam;
                tf::Transform T_A_sidecam_old_world, T_A_sidecam_new_world;
                tf::Transform T_B_camleft_world;
                tf::Transform T_B_backboard_A_sidecam_old;
                tf::Transform T_B_backboard_A_sidecam_new;

		xbox_follower::ShortTarget srv_short; // service name;
		ros::Publisher vel_pub_Boreas_;   // In this program, robot Boreas is the leader.
                ros::Publisher vel_pub_Apollo_;
                ros::Publisher B_camleft_transform_pub;
                ros::Publisher A_sidecam_transform_pub;
                ros::Publisher error_pub;

		ros::Subscriber joy_input_sub_;
                ros::Subscriber transRepro_sub_;
                ros::Subscriber groundtruth_sub;

//                tf::TransformBroadcaster tf_br;
		ros::ServiceClient short_dist_move_client_;

		void transReproCallback(const ar_sys::Trans_Repro_Info::ConstPtr& msg);
		void joyInputCallback(const sensor_msgs::Joy::ConstPtr& joy);
                void groundtruthCallback(const geometry_msgs::PoseStamped::ConstPtr & msg);
};

//Initialize the Class--TeleopRobot
TeleopRobot::TeleopRobot():
        free_MODE(1),
	speed_scale(0.1),
        repro_err_avr(0.0),dist_difference(0.0),nearest_dist_allower(0.0),dist_B_board_A_cam(10.0),
        START(false),is_current_pose_between_A_B_stored(false),number_of_msg(0),repro_error_array_id(0),trans_vec_id(0)
{
        T_B_backboard_B_camleft = tf::Transform(tf::Quaternion( -0.7071,0.7071,0,0),tf::Vector3(-0.1,0,-0.38));
        vel_pub_Boreas_ = nh_.advertise<geometry_msgs::Twist>("/Boreas/Twist", 1);
        vel_pub_Apollo_ = nh_.advertise<geometry_msgs::Twist>("/Apollo/Twist", 1);
        
        B_camleft_transform_pub = nh_.advertise<geometry_msgs::TransformStamped>("/B_camleft_world_transform", 100);
        A_sidecam_transform_pub = nh_.advertise<geometry_msgs::TransformStamped>("/A_sidecam_world_transform", 100);
        
        error_pub = nh_.advertise<xbox_follower::the_error>("/Error",100);
	joy_input_sub_ = nh_.subscribe<sensor_msgs::Joy>("joy", 1, &TeleopRobot::joyInputCallback, this);
        transRepro_sub_ = nh_.subscribe<ar_sys::Trans_Repro_Info>("/ar_sys/Trans_Repro_Info",1,&TeleopRobot::transReproCallback,this);
        
        groundtruth_sub = nh_.subscribe<geometry_msgs::PoseStamped>("/Boreas/pose",100,&TeleopRobot::groundtruthCallback,this);
	short_dist_move_client_ = nh_.serviceClient<xbox_follower::ShortTarget>("/ShortDistSrv");
}

void TeleopRobot::groundtruthCallback(const geometry_msgs::PoseStamped::ConstPtr &msg)
{
    tf::Vector3 groundtruth_position=tf::Vector3(msg->pose.position.x,msg->pose.position.y,msg->pose.position.z);
    tf::Vector3 test_position=tf::Vector3(T_B_camleft_world.getOrigin().getX(),T_B_camleft_world.getOrigin().getY(),T_B_camleft_world.getOrigin().getZ());
    double diff_position_x=groundtruth_position.getY()-1.5-test_position.getX();
    double diff_position_z=groundtruth_position.getX()+1-test_position.getZ();
    xbox_follower::the_error err_msg;
    err_msg.error_relative=std::sqrt(diff_position_x*diff_position_x+diff_position_z*diff_position_z);
    error_pub.publish(err_msg);
}

void TeleopRobot::transReproCallback(const ar_sys::Trans_Repro_Info::ConstPtr& msg){
         double x_coord,y_coord,z_coord;
         x_coord = msg->transform_S.transform.translation.x;
         y_coord = msg->transform_S.transform.translation.y;
         z_coord = msg->transform_S.transform.translation.z;

         dist_B_board_A_cam=sqrt(x_coord*x_coord+y_coord*y_coord+z_coord*z_coord);
         T_B_backboard_A_sidecam.setOrigin(tf::Vector3(x_coord, y_coord, z_coord));
	 T_B_backboard_A_sidecam.setRotation(tf::Quaternion(msg->transform_S.transform.rotation.x, msg->transform_S.transform.rotation.y, msg->transform_S.transform.rotation.z, msg->transform_S.transform.rotation.w));

        if( !START ){
                T_B_camleft_world = tf::Transform(tf::Quaternion(0,0,0,1),tf::Vector3(0,0,0));
                T_A_sidecam_new_world = T_B_backboard_B_camleft * T_B_backboard_A_sidecam.inverse();
                T_A_sidecam_old_world = T_A_sidecam_new_world;
		START = true;
	}

        if ( START ){
            T_B_camleft_world = T_A_sidecam_old_world * T_B_backboard_A_sidecam * T_B_backboard_B_camleft.inverse();
            T_A_sidecam_new_world = T_A_sidecam_old_world; //When Boreas is moving, it means Apollo is not. So it's sidecam stays the same.

            tf::StampedTransform stampedTransform_B_world(T_B_camleft_world, msg->transform_S.header.stamp, "world", "B_camleft");
            tf::StampedTransform stampedTransform_A_world(T_A_sidecam_new_world, msg->transform_S.header.stamp, "world", "A_sidecam");
            
            geometry_msgs::TransformStamped transformMsg_B_world;
            geometry_msgs::TransformStamped transformMsg_A_world;
            
            tf::transformStampedTFToMsg(stampedTransform_B_world, transformMsg_B_world);
            tf::transformStampedTFToMsg(stampedTransform_A_world, transformMsg_A_world);

            B_camleft_transform_pub.publish(transformMsg_B_world);
            A_sidecam_transform_pub.publish(transformMsg_A_world);  //now publish the Boreas's leftcam and Apollo's sidecam's representation in world reference.
        }

            repro_error_array_id = number_of_msg%5;
            repro_err[repro_error_array_id] = msg->error;
            repro_err_avr = (repro_err[0]+repro_err[1]+repro_err[2]+repro_err[3]+repro_err[4])/5;
            number_of_msg++;
}

//Callback function of Joy input
void TeleopRobot::joyInputCallback(const sensor_msgs::Joy::ConstPtr& joy){
    
    vel_follower.linear.x = 0;
    vel_follower.linear.y = 0;
    vel_follower.angular.z = 0;
    vel_pub_Apollo_.publish(vel_follower); //Make sure the Apollo-follower is motionless.

 //   tf_br.sendTransform(tf::StampedTransform(T_A_sidecam_new_world, ros::Time::now(), "world", "Apollo_Sidecam"));
	
        if( joy->buttons[7]==1 ){  //Now in free mode;
		free_MODE = 1;
		ROS_INFO_STREAM("Now we are in FREE MODE. Press the corresponding buttons to move the Leader(Boreas) in real time."); }

	if( free_MODE == 1 ){
		if( joy->buttons[0] ==1 ){
                        speed_scale=0.1;
		}
		if( joy->buttons[1] ==1 ){
			speed_scale=0.2;
		}
		if( joy->buttons[2] ==1 ){
			speed_scale=0.3;
		}
		if( joy->buttons[3] ==1 ){
			speed_scale=0.4;
		}
                // publish the real-time velocity of the leader based on the joy input.In this program, the Boreas is the leader.
		
			vel_leader.linear.x = speed_scale*(joy->axes[7]);
			vel_leader.linear.y = speed_scale*(joy->axes[6]);
			vel_leader.angular.z = speed_scale*0.2*(-joy->buttons[5]+joy->buttons[4]);//The parameter 0.2 here is the extra scale only for rotation.
                        vel_pub_Boreas_.publish(vel_leader);
			ROS_INFO_STREAM("The real-time velocity of the leader(Boreas) is:" << vel_leader.linear.x << " " << vel_leader.linear.y <<" "<<vel_leader.angular.z);                

                // check if the average repro error is over the set threshold, if so, call the short-distance service to move follower-Apollo;
                if( repro_err_avr>12 ){

                    ros::Duration(10).sleep();//From this moment the leader Boreas is motinoless.

				if(!is_current_pose_between_A_B_stored) 
                                {
                                        T_B_backboard_A_sidecam_old = T_B_backboard_A_sidecam;
                                        is_current_pose_between_A_B_stored = true;
				}  //Stores the farthurest pose between backboard of B and apollo's sidecam.
				
				ROS_INFO("Because of the short distance service call the Joy input is now disabled.");
                                srv_short.request.nothing = 0; // Call the short_dist_srv;
                                bool target_reached = short_dist_move_client_.call(srv_short);

				if ( target_reached ) { 
					ROS_INFO("The big reprojection error stops the leader(Boreas). And the follower(Apollo) has successfully followed Boreas.");
					T_B_backboard_A_sidecam_new.setOrigin(tf::Vector3(srv_short.response.ReachedPose.position.x, srv_short.response.ReachedPose.position.y, srv_short.response.ReachedPose.position.z));
					T_B_backboard_A_sidecam_new.setRotation(tf::Quaternion(srv_short.response.ReachedPose.orientation.x, srv_short.response.ReachedPose.orientation.y, srv_short.response.ReachedPose.orientation.z, srv_short.response.ReachedPose.orientation.w));

                                        T_A_sidecam_new_world = T_A_sidecam_old_world * T_B_backboard_A_sidecam_old * T_B_backboard_A_sidecam_new.inverse();  //during this procesure the backboard of Boreas is motionless.
                                        T_A_sidecam_old_world = T_A_sidecam_new_world;// This is for next round of localization;
                                        ROS_INFO("The Joy Input is working now.");
				}
				if ( !target_reached ) ROS_INFO("The Follower-Apollo has not reached sussessfully.");
                                is_current_pose_between_A_B_stored = false;
                        }// end of (if repro_err_avr>12);

                    if( joy->buttons[4] ==1 ){ //if press the button 5, also trigger the short service.

                        ros::Duration(10).sleep(); //From this moment the leader Boreas is motinoless.
				
				if(!is_current_pose_between_A_B_stored) 
                                {
                                        T_B_backboard_A_sidecam_old = T_B_backboard_A_sidecam;
                                        is_current_pose_between_A_B_stored = true;
				}  //Stores the current pose between backboard of B and apollo's sidecam before apollo moves.
				
				ROS_INFO("Because of the short distance service call the Joy input is now disabled.");
                                srv_short.request.nothing = 0; // Call the short_dist_srv;
				bool target_reached = short_dist_move_client_.call(srv_short);

				if ( target_reached ) { 
					ROS_INFO("The press of button 5 has triggered the follower-apollo to follow leader-Boreas.");
					T_B_backboard_A_sidecam_new.setOrigin(tf::Vector3(srv_short.response.ReachedPose.position.x, srv_short.response.ReachedPose.position.y, srv_short.response.ReachedPose.position.z));
					T_B_backboard_A_sidecam_new.setRotation(tf::Quaternion(srv_short.response.ReachedPose.orientation.x, srv_short.response.ReachedPose.orientation.y, srv_short.response.ReachedPose.orientation.z, srv_short.response.ReachedPose.orientation.w));

					T_A_sidecam_new_world = T_A_sidecam_old_world * T_B_backboard_A_sidecam_old * T_B_backboard_A_sidecam_new.inverse();  //during this procesure the backboard of Boreas is motionless.
                                        T_A_sidecam_old_world = T_A_sidecam_new_world;
                                        ROS_INFO("The Joy Input is working now.");
				}
				if ( !target_reached ) ROS_INFO("The Follower-Apollo has not reached successfully.");
                                is_current_pose_between_A_B_stored = false;
                        }// end of (if joy->buttons[4] ==1);


                    if( dist_B_board_A_cam<nearest_dist_allower )
                    {
                        //This would also stops Boreas from moving too near to Apollo.
                        ros::Duration(10).sleep();
                        if(!is_current_pose_between_A_B_stored)
                        {
                            T_B_backboard_A_sidecam_old=T_B_backboard_A_sidecam;
                            is_current_pose_between_A_B_stored=true;
                        }//Stores the current pose between backboard of B and apollo's sidecam before apollo moves.
                        ROS_INFO("Because of the short distance service call the Joy input is now disabled.");
                        srv_short.request.nothing = 0; // Call the short_dist_srv;
                        bool target_reached = short_dist_move_client_.call(srv_short);
                        if(target_reached)
                        {
                            ROS_INFO("The press of button 5 has triggered the follower-apollo to follow leader-Boreas.");
                            T_B_backboard_A_sidecam_new.setOrigin(tf::Vector3(srv_short.response.ReachedPose.position.x, srv_short.response.ReachedPose.position.y, srv_short.response.ReachedPose.position.z));
                            T_B_backboard_A_sidecam_new.setRotation(tf::Quaternion(srv_short.response.ReachedPose.orientation.x, srv_short.response.ReachedPose.orientation.y, srv_short.response.ReachedPose.orientation.z, srv_short.response.ReachedPose.orientation.w));

                            T_A_sidecam_new_world = T_A_sidecam_old_world * T_B_backboard_A_sidecam_old * T_B_backboard_A_sidecam_new.inverse();  //during this procesure the backboard of Boreas is motionless.
                            T_A_sidecam_old_world = T_A_sidecam_new_world;
                            ROS_INFO("The Joy Input is working now.");
                        }
                        if ( !target_reached ) ROS_INFO("The Follower-Apollo has not reached successfully.");
                        is_current_pose_between_A_B_stored = false;

                    }//end of backward move partion

        } // End of free mode.

} //end of joy input.


int main(int argc, char** argv)
{
	ros::init(argc, argv, "teleop_robot");
	TeleopRobot teleop_robot;
        ros::spin();
}
